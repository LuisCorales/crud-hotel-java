/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Clases.*;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.LocalDate;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 * @author Diego Hiriart
 * @author Luis Corales
 * @author Martin Galvez
 * @author Daniel Alban
 * @author Daniela Estupinan
 */
public class MantenimientoEspecial extends javax.swing.JInternalFrame {

    Admin recepcion = new Admin();
    ArbolMantenimiento mantenimiento;
    
    /**
     * Creates new form Mantenimiento
     */
    public MantenimientoEspecial(Admin recepcionP) {
        initComponents();
        this.recepcion = recepcionP;
        this.mantenimiento = crearArbol();
    }
    
    public ArbolMantenimiento crearArbol(){
        Fecha inicio=null, fin=null;
        NodoMantenimiento normal = new NodoMantenimiento(new Mantenimiento("Limpieza normal", inicio, fin),null, null);
        ArbolMantenimiento mantenimiento = new ArbolMantenimiento(normal);    
        NodoMantenimiento plomeria = new NodoMantenimiento(new Mantenimiento("Problemas plomeria", inicio, fin),null, null);
        NodoMantenimiento pintura = new NodoMantenimiento(new Mantenimiento("Pintura", inicio, fin),null, null);
        mantenimiento.insertar(normal, plomeria, pintura);
        NodoMantenimiento reemplazo = new NodoMantenimiento(new Mantenimiento("Reemplazo sanitarios", inicio, fin),null, null);
        NodoMantenimiento griferia = new NodoMantenimiento(new Mantenimiento("Griferia", inicio, fin),null, null);
        mantenimiento.insertar(plomeria, reemplazo, griferia);
        NodoMantenimiento cambioCanPlom = new NodoMantenimiento(new Mantenimiento("Cambios cañeria y plomeria", inicio, fin),null, null);
        mantenimiento.insertar(reemplazo, cambioCanPlom, null);
        NodoMantenimiento muebles = new NodoMantenimiento(new Mantenimiento("Cambio muebles", inicio, fin),null, null);
        NodoMantenimiento electricos = new NodoMantenimiento(new Mantenimiento("Electricos", inicio, fin),null, null);
        mantenimiento.insertar(pintura, muebles, electricos);
        return mantenimiento;
    }
    
    public String fechas(int tiempo,int dia, int mes, int anio){
        String fin=dia+"-"+mes+"-"+anio;
        if(dia+tiempo>=30){
            if(mes+(tiempo/30)>=12){
                anio+=(tiempo/360);
                tiempo-=(tiempo/360)*360;
                mes=1;
                mes+=((dia+tiempo)/30);
                tiempo-=(tiempo/30)*30;
                dia=1;
                dia+=tiempo;
            }else{
                mes+=((dia+tiempo)/30);
                tiempo-=(tiempo/30)*30;
                dia=1;
                dia+=tiempo;
            }
        }else{
            dia+=tiempo;
        }
        fin=dia+"-"+mes+"-"+anio;
        return fin;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        habitacionComboBox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        mantenimientoComboBox = new javax.swing.JComboBox<>();
        duracionLabel = new javax.swing.JLabel();
        duracionField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        diaField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        mesComboBox = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        anioField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        finField = new javax.swing.JTextField();
        registrarButton = new javax.swing.JButton();
        fechaButton = new javax.swing.JButton();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setIconifiable(true);
        setTitle("        Registrar mantenimientos especiales de habitación");

        jLabel1.setText("Habitación:");

        habitacionComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "21", "22", "23", "24", "25", "26", "27", "28" }));
        habitacionComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                habitacionComboBoxActionPerformed(evt);
            }
        });

        jLabel2.setText("Mantenimiento especial:");

        mantenimientoComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-", "Problemas plomeria", "Pintura", "Reemplazo sanitarios", "Griferia", "Cambio muebles", "Electricos", "Cambios cañeria y plomeria", "Otro" }));
        mantenimientoComboBox.setEnabled(false);
        mantenimientoComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mantenimientoComboBoxActionPerformed(evt);
            }
        });

        duracionLabel.setText("Duración (en días):");
        duracionLabel.setEnabled(false);

        duracionField.setEnabled(false);

        jLabel4.setText("Fecha inicio:");

        jLabel5.setText("Día");

        diaField.setEnabled(false);

        jLabel6.setText("Mes");

        mesComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-", "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre" }));
        mesComboBox.setEnabled(false);

        jLabel7.setText("Año");

        anioField.setEnabled(false);

        jLabel8.setText("Fecha fin (día-mes-año):");

        finField.setEditable(false);

        registrarButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        registrarButton.setText("Registrar mantenimiento");
        registrarButton.setEnabled(false);
        registrarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registrarButtonActionPerformed(evt);
            }
        });

        fechaButton.setText("Previsualizar fecha de fin de mantenimiento");
        fechaButton.setEnabled(false);
        fechaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fechaButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(mesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(diaField, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(anioField, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(fechaButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(242, 242, 242)
                        .addComponent(registrarButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(18, 18, 18)
                                .addComponent(finField, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(habitacionComboBox, 0, 198, Short.MAX_VALUE)
                                    .addComponent(mantenimientoComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(51, 51, 51)
                                .addComponent(duracionLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(duracionField, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(habitacionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(mantenimientoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(duracionLabel)
                    .addComponent(duracionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(diaField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(mesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(anioField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(19, 19, 19)
                .addComponent(fechaButton)
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(finField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addComponent(registrarButton)
                .addGap(39, 39, 39))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void registrarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registrarButtonActionPerformed
        // TODO add your handling code here:
        //Aniade un mantenimiento al archivo con las fechas en el lugar adecuado segun el mantenimiento que sea
        if(this.habitacionComboBox.getSelectedIndex()>0 && this.mantenimientoComboBox.getSelectedIndex()>0){  
            String error="";
            try{
                String ruta = "PorteroAdminHotel\\Mantenimientos.txt", existentes="";//C:\\PorteroAdminHotel\\Mantenimientos.txt       
                File archivo = new File(ruta);
                try {
                    existentes = Files.readAllLines(Paths.get(archivo.toString())).get(this.habitacionComboBox.getSelectedIndex()-1);
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(this, "Error de lectura");
                } 
                List <String> lineas=null;
                try {
                    lineas = Files.readAllLines(Paths.get(archivo.toString()));
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(this, "Error de lectura");
                }           
                String dia=this.diaField.getText(), mes=String.valueOf(this.mesComboBox.getSelectedIndex()), anio=this.anioField.getText();
                int diaInicio=Integer.parseInt(dia) , mesInicio=this.mesComboBox.getSelectedIndex(), anioInicio= Integer.parseInt(anio), tiempo=0;
                if(this.mantenimientoComboBox.getSelectedIndex()!=8){
                    int nivel=mantenimiento.nivel(this.mantenimientoComboBox.getSelectedItem().toString(), 1);
                    switch(nivel){
                        case 1:
                            tiempo = 0;
                        break;
                        case 2:
                            tiempo = 3;
                        break;
                        case 3:
                            tiempo = 7;
                        break;
                        case 4:
                            tiempo = 14;
                        break;
                    }
                }else if(this.mantenimientoComboBox.getSelectedIndex()==8){
                    tiempo=Integer.parseInt(this.duracionField.getText());
                }
                String fin = fechas(tiempo, diaInicio, mesInicio, anioInicio);

                Fecha ini = new Fecha(), fi = new Fecha();
                try{
                    ini=new Fecha(Integer.parseInt(this.diaField.getText()), this.mesComboBox.getSelectedIndex(), Integer.parseInt(this.anioField.getText()));
                }catch(Exception e){
                    error=error+"Fecha de inicio\n";
                }
                String nombreCheck = this.mantenimientoComboBox.getSelectedItem().toString();
                int nivelCheck = this.mantenimiento.nivel(nombreCheck, 1);              
                    int tiempoCheck = 0;//dias
                    switch(nivelCheck){
                        case 1:
                            tiempoCheck = 0;
                        break;
                        case 2:
                            tiempoCheck = 3;
                        break;
                        case 3:
                            tiempoCheck = 7;
                        break;
                        case 4:
                            tiempoCheck = 14;
                        break;
                    }
                try{
                    String finFecha = fechas(tiempoCheck, ini.getDia(), ini.getMes(), ini.getAnio());
                    String[] finaliza = finFecha.split("-");
                    fi=new Fecha(Integer.parseInt(finaliza[0]), Integer.parseInt(finaliza[1]), Integer.parseInt(finaliza[2]));
                }catch(Exception e){
                    error=error+"Fecha de Fin\n";
                }
                String hab = this.habitacionComboBox.getSelectedItem().toString();
                if(!hab.equalsIgnoreCase("")){
                    List<String> disponibles = recepcion.habDisponiblesRe(ini, fi);
                    List<String> quitar = recepcion.habMantenimiento(ini, fi);
                    for(String quita : quitar){
                        disponibles.remove(quita);
                    }
                    if(!disponibles.contains(hab)){
                        error+="La habitación de la reserva que está editando se encontrará ocupada en ese rango de fechas";                       
                    }
                }
                if(error.equalsIgnoreCase("")){
                    String[] fechaF = fin.split("-");
                    Fecha inicio = new Fecha(diaInicio, mesInicio, anioInicio), fechaFin = new Fecha(Integer.parseInt(fechaF[0]), Integer.parseInt(fechaF[1]), Integer.parseInt(fechaF[2]));
                    Mantenimiento mant = new Mantenimiento(this.mantenimientoComboBox.getSelectedItem().toString(), inicio, fechaFin);         
                    lineas.set(this.habitacionComboBox.getSelectedIndex()-1, existentes+mant.toString()); 
                    try {
                        Files.write(archivo.toPath(), lineas);
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(this, "Error de escritura");
                    }

                    this.habitacionComboBox.setSelectedIndex(0);
                    this.duracionField.setText("");
                    this.duracionLabel.setEnabled(false);           
                    this.mantenimientoComboBox.setSelectedIndex(0);
                    this.mantenimientoComboBox.setEnabled(false);
                    this.diaField.setText("");
                    this.diaField.setEnabled(false);
                    this.mesComboBox.setSelectedIndex(0);
                    this.mesComboBox.setEnabled(false);
                    this.anioField.setText("");
                    this.anioField.setEnabled(false);
                    this.finField.setText("");
                    this.fechaButton.setEnabled(false);
                    this.registrarButton.setEnabled(true);
                }else{
                    JOptionPane.showMessageDialog(this, "Han ocurrido lo siguientes erroes:\n "+error);                   
                }
                
            }catch(Exception e){
                JOptionPane.showMessageDialog(this, "Error de lectura de archivo\n no existe la carpeta PorteroAdminHotel\\Finalizadas\\");
            }                  
        }      
    }//GEN-LAST:event_registrarButtonActionPerformed

    private void fechaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fechaButtonActionPerformed
        // TODO add your handling code here:
        //Previsualizar fehca de fin
        if(this.habitacionComboBox.getSelectedIndex()>0 && this.mantenimientoComboBox.getSelectedIndex()>0 && this.mantenimientoComboBox.getSelectedIndex()!=8){
            LocalDate actual = LocalDate.now();//Da fecha actual
            int dia=0, mes=0, anio=0;
            String error = "";
            try{
                dia=Integer.parseInt(this.diaField.getText());
            }catch(Exception e){
                error+="Ha ingresado datos invalidos en el día de inicio o lo ha dejado vacío\n";
            }
            try{
                mes=this.mesComboBox.getSelectedIndex();
                if(this.mesComboBox.getSelectedIndex()==0){
                    error+="Ha dejado vacío el campo de mes de inicio\n";
                }
            }catch(Exception e){
                error+="Ha dejado vacío el campo de mes de inicio\n";
            }
            try{
                anio=Integer.parseInt(this.anioField.getText());
            }catch(Exception e){
                error+="Ha ingresado datos invalidos en el año de inicio o lo ha dejado vacio\n";
            }
            try{
                if(Integer.parseInt(this.anioField.getText())<=actual.getYear()){
                    if((this.mesComboBox.getSelectedIndex())<=actual.getMonthValue()){
                        if(Integer.parseInt(this.diaField.getText())<actual.getDayOfMonth()&&(this.mesComboBox.getSelectedIndex())<=actual.getMonthValue()){
                            error+="Ha ingresado una fecha de inicio anterior a \nla fecha actual, ingrese de nuevo\n";
                        }
                    }
                }
                if((Integer.parseInt(this.anioField.getText())%4==0) && (Integer.parseInt(this.anioField.getText())%100!=0 || Integer.parseInt(this.anioField.getText())%400==0)){
                    mes=this.mesComboBox.getSelectedIndex();
                    if(mes==2){
                        if(Integer.parseInt(this.diaField.getText())>29){
                            error+="El mes de Febrero en ese año tiene solo 29 días\n";
                        }
                    }else if(mes==1 || mes==3 || mes==5 || mes==7 || mes==8 || mes==10 || mes==12){
                        if(Integer.parseInt(this.diaField.getText())>31){
                            error+="El mes de "+this.mesComboBox.getSelectedItem().toString()+" solo tiene 31 días\n";
                        }
                    }else{
                        if(Integer.parseInt(this.diaField.getText())>30){
                            error+="El mes de "+this.mesComboBox.getSelectedItem().toString()+" solo tiene 30 días\n";
                        }
                    }
                }else{
                    mes=this.mesComboBox.getSelectedIndex();
                    if(mes==2){
                        if(Integer.parseInt(this.diaField.getText())>28){
                            error+="El mes de Febrero en ese año tiene solo 28 días\n";
                        }
                    }else if(mes==1 || mes==3 || mes==5 || mes==7 || mes==8 || mes==10 || mes==12){
                        if(Integer.parseInt(this.diaField.getText())>31){
                            error+="El mes de "+this.mesComboBox.getSelectedItem().toString()+" solo tiene 31 días\n";
                        }
                    }else{
                        if(Integer.parseInt(this.diaField.getText())>30){
                            error+="El mes de "+this.mesComboBox.getSelectedItem().toString()+" solo tiene 30 días\n";
                        }
                    }
                }
            }catch(Exception e){
                //Excepciones que se pueden dar aqui ya se cubren antes
            }          
            
            if(error.equalsIgnoreCase("")){
                Fecha ini = new Fecha(), fi = new Fecha();
                try{
                    ini=new Fecha(Integer.parseInt(this.diaField.getText()), this.mesComboBox.getSelectedIndex(), Integer.parseInt(this.anioField.getText()));
                }catch(Exception e){
                    error=error+"Fecha de inicio\n";
                }
                String nombreCheck = this.mantenimientoComboBox.getSelectedItem().toString();
                int nivelCheck = this.mantenimiento.nivel(nombreCheck, 1);              
                    int tiempoCheck = 0;//dias
                    switch(nivelCheck){
                        case 1:
                            tiempoCheck = 0;
                        break;
                        case 2:
                            tiempoCheck = 3;
                        break;
                        case 3:
                            tiempoCheck = 7;
                        break;
                        case 4:
                            tiempoCheck = 14;
                        break;
                    }
                try{
                    String finFecha = fechas(tiempoCheck, ini.getDia(), ini.getMes(), ini.getAnio());
                    String[] finaliza = finFecha.split("-");
                    fi=new Fecha(Integer.parseInt(finaliza[0]), Integer.parseInt(finaliza[1]), Integer.parseInt(finaliza[2]));
                }catch(Exception e){
                    error=error+"Fecha de Fin\n";
                }
                String hab = this.habitacionComboBox.getSelectedItem().toString();
                if(!hab.equalsIgnoreCase("")){
                    List<String> disponibles = recepcion.habDisponiblesRe(ini, fi);
                    List<String> quitar = recepcion.habMantenimiento(ini, fi);
                    for(String quita : quitar){
                        disponibles.remove(quita);
                    }
                    if(!disponibles.contains(hab)){
                        error+="La habitación estará ocupada en ese rango de fechas";
                    }
                }
                if(error.equalsIgnoreCase("")){
                    this.registrarButton.setEnabled(true);
                    String nombre = this.mantenimientoComboBox.getSelectedItem().toString();
                    int nivel = this.mantenimiento.nivel(nombre, 1);              
                    int tiempo = 0;//dias
                    switch(nivel){
                        case 1:
                            tiempo = 0;
                        break;
                        case 2:
                            tiempo = 3;
                        break;
                        case 3:
                            tiempo = 7;
                        break;
                        case 4:
                            tiempo = 14;
                        break;
                    }
                    String fin = fechas(tiempo, dia, mes, anio);
                    this.finField.setText(fin);
                }else{
                    JOptionPane.showMessageDialog(this, "Han ocurrido lo siguientes erroes:\n "+error);
                    this.registrarButton.setEnabled(false);
                    this.finField.setText("");
                }         
            }else{
                JOptionPane.showMessageDialog(this, "Han ocurrido lo siguientes erroes:\n "+error);
                this.registrarButton.setEnabled(false);
                this.finField.setText("");
            }
        }else if(this.mantenimientoComboBox.getSelectedIndex()==8 && this.habitacionComboBox.getSelectedIndex()>0){
            LocalDate actual = LocalDate.now();//Da fecha actual
            int dia=0, mes=0, anio=0;
            String error = "";
            try{
                dia=Integer.parseInt(this.diaField.getText());
            }catch(Exception e){
                error+="Ha ingresado datos invalidos en el día de inicio o lo ha dejado vacío\n";
            }
            try{
                mes=this.mesComboBox.getSelectedIndex();
                if(this.mesComboBox.getSelectedIndex()==0){
                    error+="Ha dejado vacío el campo de mes de inicio\n";
                }
            }catch(Exception e){
                error+="Ha dejado vacío el campo de mes de inicio\n";
            }
            try{
                anio=Integer.parseInt(this.anioField.getText());
            }catch(Exception e){
                error+="Ha ingresado datos invalidos en el año de inicio o lo ha dejado vacio\n";
            }
            try{
                if(Integer.parseInt(this.anioField.getText())<=actual.getYear()){
                    if((this.mesComboBox.getSelectedIndex())<=actual.getMonthValue()){
                        if(Integer.parseInt(this.diaField.getText())<actual.getDayOfMonth()&&(this.mesComboBox.getSelectedIndex())<=actual.getMonthValue()){
                            error+="Ha ingresado una fecha de inicio anterior a \nla fecha actual, ingrese de nuevo\n";
                        }
                    }
                }
                if((Integer.parseInt(this.anioField.getText())%4==0) && (Integer.parseInt(this.anioField.getText())%100!=0 || Integer.parseInt(this.anioField.getText())%400==0)){
                    int mesTest=this.mesComboBox.getSelectedIndex();
                    if(mes==2){
                        if(Integer.parseInt(this.diaField.getText())>29){
                            error+="El mes de Febrero en ese año tiene solo 29 días\n";
                        }
                    }else if(mes==1 || mes==3 || mes==5 || mes==7 || mes==8 || mes==10 || mes==12){
                        if(Integer.parseInt(this.diaField.getText())>31){
                            error+="El mes de "+this.mesComboBox.getSelectedItem().toString()+" solo tiene 31 días\n";
                        }
                    }else{
                        if(Integer.parseInt(this.diaField.getText())>30){
                            error+="El mes de "+this.mesComboBox.getSelectedItem().toString()+" solo tiene 30 días\n";
                        }
                    }
                }else{
                    int mesTest=this.mesComboBox.getSelectedIndex();
                    if(mes==2){
                        if(Integer.parseInt(this.diaField.getText())>28){
                            error+="El mes de Febrero en ese año tiene solo 28 días\n";
                        }
                    }else if(mes==1 || mes==3 || mes==5 || mes==7 || mes==8 || mes==10 || mes==12){
                        if(Integer.parseInt(this.diaField.getText())>31){
                            error+="El mes de "+this.mesComboBox.getSelectedItem().toString()+" solo tiene 31 días\n";
                        }
                    }else{
                        if(Integer.parseInt(this.diaField.getText())>30){
                            error+="El mes de "+this.mesComboBox.getSelectedItem().toString()+" solo tiene 30 días\n";
                        }
                    }
                }
            }catch(Exception e){
                //Excepciones que se pueden dar aqui ya se cubren antes
            }
            
            int tiempo = 0;//dias
            try{
                tiempo = Integer.parseInt(this.duracionField.getText());
                if(tiempo<=0){
                    error+="El mantenimiento debe durar más de cero días\n";
                }
            }catch(Exception e){
                error+="Ha ingresado datos inválidos o ha dejado vacía la duración";
            }
            if(error.equalsIgnoreCase("")){
                Fecha ini = new Fecha(), fi = new Fecha();
                try{
                    ini=new Fecha(Integer.parseInt(this.diaField.getText()), this.mesComboBox.getSelectedIndex(), Integer.parseInt(this.anioField.getText()));
                }catch(Exception e){
                    error=error+"Fecha de inicio\n";
                }
                String nombreCheck = this.mantenimientoComboBox.getSelectedItem().toString();
                int nivelCheck = this.mantenimiento.nivel(nombreCheck, 1);              
                    int tiempoCheck = 0;//dias
                    switch(nivelCheck){
                        case 1:
                            tiempoCheck = 0;
                        break;
                        case 2:
                            tiempoCheck = 3;
                        break;
                        case 3:
                            tiempoCheck = 7;
                        break;
                        case 4:
                            tiempoCheck = 14;
                        break;
                    }
                try{
                    String finFecha = fechas(tiempoCheck, ini.getDia(), ini.getMes(), ini.getAnio());
                    String[] finaliza = finFecha.split("-");
                    fi=new Fecha(Integer.parseInt(finaliza[0]), Integer.parseInt(finaliza[1]), Integer.parseInt(finaliza[2]));
                }catch(Exception e){
                    error=error+"Fecha de Fin\n";
                }
                String hab = this.habitacionComboBox.getSelectedItem().toString();
                if(!hab.equalsIgnoreCase("")){
                    List<String> disponibles = recepcion.habDisponiblesRe(ini, fi);
                    List<String> quitar = recepcion.habMantenimiento(ini, fi);
                    for(String quita : quitar){
                        disponibles.remove(quita);
                    }
                    if(!disponibles.contains(hab)){
                        error+="La habitación estará ocupada en ese rango de fechas";
                    }
                }
                if(error.equalsIgnoreCase("")){
                    this.finField.setText(this.fechas(tiempo, dia, mes, anio));
                    this.registrarButton.setEnabled(false);
                    String nombre = this.mantenimientoComboBox.getSelectedItem().toString();           
                }else{
                   JOptionPane.showMessageDialog(this, "Han ocurrido lo siguientes erroes:\n "+error); 
                   this.registrarButton.setEnabled(false);
                   this.finField.setText("");
                }                     
            }else{
                JOptionPane.showMessageDialog(this, "Han ocurrido lo siguientes erroes:\n "+error);
                this.registrarButton.setEnabled(false);
                this.finField.setText("");
            }
        }
    }//GEN-LAST:event_fechaButtonActionPerformed

    private void habitacionComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_habitacionComboBoxActionPerformed
        // TODO add your handling code here:
        if(this.habitacionComboBox.getSelectedIndex()>0){
            this.mantenimientoComboBox.setEnabled(true);           
        }
        
    }//GEN-LAST:event_habitacionComboBoxActionPerformed

    private void mantenimientoComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mantenimientoComboBoxActionPerformed
        // TODO add your handling code here:
        if(this.mantenimientoComboBox.getSelectedIndex()>0 && this.mantenimientoComboBox.getSelectedIndex()!=8){
            this.diaField.setEnabled(true);
            this.mesComboBox.setEnabled(true);
            this.anioField.setEnabled(true);
            this.fechaButton.setEnabled(true);
        }else if(this.mantenimientoComboBox.getSelectedIndex()==8){
            this.duracionLabel.setEnabled(true);
            this.duracionField.setEnabled(true);
            this.diaField.setEnabled(true);
            this.mesComboBox.setEnabled(true);
            this.anioField.setEnabled(true);
            this.fechaButton.setEnabled(true);
        }
    }//GEN-LAST:event_mantenimientoComboBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MantenimientoEspecial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MantenimientoEspecial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MantenimientoEspecial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MantenimientoEspecial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Admin recepcionP = new Admin();
                new MantenimientoEspecial(recepcionP).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField anioField;
    private javax.swing.JTextField diaField;
    private javax.swing.JTextField duracionField;
    private javax.swing.JLabel duracionLabel;
    private javax.swing.JButton fechaButton;
    private javax.swing.JTextField finField;
    private javax.swing.JComboBox<String> habitacionComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JComboBox<String> mantenimientoComboBox;
    private javax.swing.JComboBox<String> mesComboBox;
    private javax.swing.JButton registrarButton;
    // End of variables declaration//GEN-END:variables
}
