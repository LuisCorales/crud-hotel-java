/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Clases.*;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.List;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * @author Diego Hiriart
 * @author Luis Corales
 * @author Martin Galvez
 * @author Daniel Alban
 * @author Daniela Estupinan
 */
public class NuevaReserva extends javax.swing.JInternalFrame {

    DefaultTableModel huesped=new DefaultTableModel();
    DefaultTableModel reserva=new DefaultTableModel();
    Admin recepcion = new Admin();
    /**
     * Creates new form NuevaReserva
     */
    public NuevaReserva(Admin recepcionP) {
        initComponents();
        this.recepcion = recepcionP;
        //Inicializar fechas con la actual y dia +1 para la de fin
        //Cada vez que se interactue con  los items de fecha se refrescan las disponibles
        tablaHuesped();
        tablaReserva();
    }
    
    public void tablaHuesped(){
        this.huesped.addColumn("NOMBRE"); 
        this.huesped.addColumn("ID"); 
        this.huesped.addColumn("EDAD"); 
        this.huesped.addColumn("TELÉFONO"); 
        this.huesped.addColumn("CORREO"); 
    }
    
    public void tablaReserva(){
        this.reserva.addColumn("FECHA INICIO");
        this.reserva.addColumn("FECHA FIN");
        this.reserva.addColumn("TOTAL ADULTOS");
        this.reserva.addColumn("TOTAL NIÑOS");
        this.reserva.addColumn("METODO PAGO");
        this.reserva.addColumn("HABITACIÓN");
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        principalScrollPane = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        telefonoField = new javax.swing.JTextField();
        mesFinCombo = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        infoReservaTable = new javax.swing.JTable();
        correoLabel = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        diaInicioField = new javax.swing.JTextField();
        metodoPagoCombo = new javax.swing.JComboBox<>();
        totalAdultosField = new javax.swing.JTextField();
        totalNiniosField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        anioFinField = new javax.swing.JTextField();
        habitacionCombo = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        nombreField = new javax.swing.JTextField();
        diaFinField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        AdultosLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        huespedTable = new javax.swing.JTable();
        jLabel15 = new javax.swing.JLabel();
        idLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        previsualizarButton = new javax.swing.JButton();
        nombreLabel = new javax.swing.JLabel();
        telefonoLabel = new javax.swing.JLabel();
        anioInicioField = new javax.swing.JTextField();
        correoField = new javax.swing.JTextField();
        registarButton = new javax.swing.JButton();
        idField = new javax.swing.JTextField();
        mesInicioCombo = new javax.swing.JComboBox<>();
        edadLabel = new javax.swing.JLabel();
        previzLabel = new javax.swing.JLabel();
        edadField = new javax.swing.JTextField();
        habitacionLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        validarIDComboBox = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        validarIDField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        actualizarButton = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setTitle("Nueva reserva");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Fecha fin*");

        mesFinCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-", "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembe", "Diciembre" }));

        infoReservaTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(infoReservaTable);

        correoLabel.setText("Correo");

        jLabel5.setText("Metodo de pago*");

        metodoPagoCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-", "Crédito", "Débito", "Efectivo" }));

        jLabel12.setText("Dia");

        habitacionCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-" }));
        habitacionCombo.setEnabled(false);

        jLabel13.setText("Dia");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Huesped");

        AdultosLabel.setText("Total adultos*");

        huespedTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(huespedTable);

        jLabel15.setText("Año");

        idLabel.setText("Cedula o pasaporte*");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Fecha inicio*");

        jLabel17.setText("Total niños*");

        jLabel14.setText("Año");

        previsualizarButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        previsualizarButton.setText("Previsualizar");
        previsualizarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previsualizarButtonActionPerformed(evt);
            }
        });

        nombreLabel.setText("Nombres y apellidos*");

        telefonoLabel.setText("Teléfono*");

        registarButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        registarButton.setText("Registrar");
        registarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registarButtonActionPerformed(evt);
            }
        });

        mesInicioCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-", "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembe", "Diciembre" }));

        edadLabel.setText("Edad*");

        previzLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        previzLabel.setText("Previsualización:");

        habitacionLabel.setText("Habitacion (de disponibles en el rango de fechas)*");

        jLabel4.setText("Es ID ecuatoriana*");

        validarIDComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NO", "SI" }));
        validarIDComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validarIDComboBoxActionPerformed(evt);
            }
        });

        jLabel6.setText("ID Valida:");

        validarIDField.setEditable(false);
        validarIDField.setText("-");

        jLabel7.setText("Mes");

        jLabel8.setText("Mes");

        jLabel9.setText("*: campo obligatorio");

        actualizarButton.setText("Actualizar habitaciones disponibles");
        actualizarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actualizarButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(223, 223, 223)
                        .addComponent(previsualizarButton)
                        .addGap(77, 77, 77)
                        .addComponent(registarButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 524, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addGap(22, 22, 22)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(previzLabel)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(habitacionLabel)
                                                .addGap(18, 18, 18)
                                                .addComponent(habitacionCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(10, 10, 10)
                                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 524, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                    .addGap(33, 33, 33)
                                                    .addComponent(jLabel3)
                                                    .addGap(42, 42, 42))
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                    .addComponent(nombreLabel)
                                                    .addGap(18, 18, 18)))
                                            .addComponent(nombreField, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(jLabel6)
                                                .addComponent(jLabel4)
                                                .addComponent(idLabel))
                                            .addGap(18, 18, 18)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(validarIDComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(idField, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(validarIDField, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGap(63, 63, 63)
                                            .addComponent(AdultosLabel)
                                            .addGap(18, 18, 18)
                                            .addComponent(totalAdultosField, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jLabel5)
                                                .addGap(18, 18, 18)
                                                .addComponent(metodoPagoCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                                .addGap(73, 73, 73)
                                                .addComponent(jLabel17)
                                                .addGap(18, 18, 18)
                                                .addComponent(totalNiniosField, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGap(77, 77, 77)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                            .addComponent(edadLabel)
                                            .addGap(18, 18, 18)
                                            .addComponent(edadField, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                            .addComponent(correoLabel)
                                            .addGap(18, 18, 18)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel9)
                                                .addComponent(correoField, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(telefonoLabel)
                                .addGap(18, 18, 18)
                                .addComponent(telefonoField, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(0, 44, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(273, 273, 273)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel8)
                    .addComponent(jLabel7))
                .addGap(132, 132, 132)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(anioInicioField, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(actualizarButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(anioFinField, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(71, 71, 71)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel1)
                        .addComponent(jLabel2))
                    .addGap(32, 32, 32)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel13)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(diaFinField, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel12)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(diaInicioField, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGap(44, 44, 44)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(mesInicioCombo, 0, 87, Short.MAX_VALUE)
                        .addComponent(mesFinCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addContainerGap(382, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jLabel14)
                            .addComponent(anioInicioField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel8))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(actualizarButton)
                        .addGap(2, 2, 2)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel15)
                            .addComponent(anioFinField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(27, 27, 27)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nombreLabel)
                    .addComponent(nombreField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(edadField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(edadLabel))
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(telefonoLabel)
                    .addComponent(telefonoField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(idLabel))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(validarIDComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(correoLabel)
                    .addComponent(correoField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(validarIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AdultosLabel)
                    .addComponent(totalAdultosField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(totalNiniosField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(metodoPagoCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(habitacionLabel)
                    .addComponent(habitacionCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(previsualizarButton)
                    .addComponent(registarButton))
                .addGap(21, 21, 21)
                .addComponent(previzLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(14, 14, 14)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(mesInicioCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(diaInicioField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel12))
                    .addGap(18, 18, 18)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(diaFinField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(mesFinCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel13))
                    .addContainerGap(626, Short.MAX_VALUE)))
        );

        principalScrollPane.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(principalScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 828, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(principalScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 594, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void validarIDComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validarIDComboBoxActionPerformed
        // TODO add your handling code here:
        if(this.idField.getText().length()==10&&this.validarIDComboBox.getSelectedItem().toString().equalsIgnoreCase("si")){
            if(recepcion.cedula(this.idField.getText())){
                this.validarIDField.setText("Válida");
            }else{
                this.validarIDField.setText("Invalida");
            }
        }else if(this.idField.getText().length()!=10&&this.validarIDComboBox.getSelectedItem().toString().equalsIgnoreCase("si")){
            JOptionPane.showMessageDialog(this, "Las cedulas y pasaportes ecuatorianos tienen 10 dígitos, intente de nuevo");
        }
        if(this.validarIDComboBox.getSelectedItem().toString().equalsIgnoreCase("no")){
            this.validarIDField.setText("No aplica");
        }
    }//GEN-LAST:event_validarIDComboBoxActionPerformed

    private void registarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registarButtonActionPerformed
        // TODO add your handling code here:
        Fecha inicio, fin;      
        Huesped huesped;
        ListaGasto consumos;
        String metodoPago;
        float totalConsumos, pagoTotal;  
        int habitacionActual, habitacionOriginal;
        boolean cambioHabitacion;
        double pagoDanios;
        int adultos, ninios;
        String sugerencias;
        String nombre="", id="", telefono="", correo="", fechaInicio="", fechaFin="", error="", pago="",  habitacion="";
        int edad=0, totalAdultos=0, totalNinios=0;
        LocalDate actual = LocalDate.now();//Da fecha actual 
                
        try{
            nombre = this.nombreField.getText();
            if(!nombre.matches("[ a-zA-Z]+")||nombre.matches("")||nombre.matches(" ")){
                error+="Ha ingresado datos inválidos en el nombre\n";
            }
        }catch(Exception e){
            error=error+"Nombre\n";
        }
        try{
            id = this.idField.getText();
            if(id.matches("")||id.matches(" ")){
                error+="Datos invalidos en la dentificación\n";
            }
        }catch(Exception e){
            error=error+"Identificación\n";
        }
        try{
            edad = Integer.parseInt(this.edadField.getText());
            if(edad<18){
                error+="Edad inválida, debe tenr al menos 18\n";
            }
        }catch(Exception e){
            error=error+"Edad\n";
        }
        try{
            telefono = this.telefonoField.getText();
            if(telefono.matches("")||telefono.matches(" ")){
                error+="Datos inválidos en el teléfono\n";
            }
        }catch(Exception e){
            error=error+"Telefono\n";
        }
        if(!this.correoField.getText().isEmpty()){
            try{
                correo = this.correoField.getText();
                if(correo.matches("")||correo.matches(" ")){
                    error+="Datos inválidos en el correo\n";
                }
            }catch(Exception e){
                error=error+"Correo\n";
            }
        }        
        
        try{
            fechaInicio=this.diaInicioField.getText()+"-"+this.mesInicioCombo.getSelectedIndex()+"-"+this.anioInicioField.getText();
            Integer.parseInt(this.diaInicioField.getText()); Integer.parseInt(this.anioInicioField.getText());
        }catch(Exception e){
            error=error+"Fecha de inicio\n";
        }
        try{
            fechaFin=this.diaFinField.getText()+"-"+this.mesFinCombo.getSelectedIndex()+"-"+this.anioFinField.getText();
            Integer.parseInt(this.diaInicioField.getText()); Integer.parseInt(this.anioInicioField.getText());
        }catch(Exception e){
            error=error+"Fecha de Fin\n";
        }
        try{
            totalAdultos=Integer.parseInt(this.totalAdultosField.getText());
            if(totalAdultos<=0){
                error+="Deben haber más de cero adultos\n";
            }
        }catch(Exception e){
            error=error+"Total adultos\n";
        }
        try{
            totalNinios=Integer.parseInt(this.totalNiniosField.getText());
            if(totalNinios<0){
                error+="Deben haber cero o más ninios\n";
            }
        }catch(Exception e){
            error=error+"Total niños\n";
        }
        try{
            pago=this.metodoPagoCombo.getSelectedItem().toString();
        }catch(Exception e){
            error=error+"Metodo de pago\n";
        }
        try{
            habitacion=this.habitacionCombo.getSelectedItem().toString();
            if(this.habitacionCombo.getSelectedItem().toString().equalsIgnoreCase("-")){
                error+="Escoja una habitación\n";
            }
        }catch(Exception e){
            error=error+"Habitación\n";
        }
        
        //validacion inicio
        try{
            if(Integer.parseInt(this.anioInicioField.getText())<=actual.getYear()){
                if((this.mesInicioCombo.getSelectedIndex())<=actual.getMonthValue()){
                    if(Integer.parseInt(this.diaInicioField.getText())<actual.getDayOfMonth()&&(this.mesInicioCombo.getSelectedIndex())<=actual.getMonthValue()){
                        error+="Ha ingresado una fecha de inicio anterior a \nla fecha actual, ingrese de nuevo\n";
                    }
                }
            }
            recepcion.setFechaInicio(new Fecha(Integer.parseInt(this.diaInicioField.getText()), this.mesInicioCombo.getSelectedIndex(), 
                Integer.parseInt(this.anioInicioField.getText())));
            if((Integer.parseInt(this.anioInicioField.getText())%4==0) && (Integer.parseInt(this.anioInicioField.getText())%100!=0 || Integer.parseInt(this.anioInicioField.getText())%400==0)){
                int mes=this.mesInicioCombo.getSelectedIndex();
                if(mes==2){
                    if(Integer.parseInt(this.diaInicioField.getText())>29){
                        error+="El mes de Febrero en ese año tiene solo 29 días\n";
                    }
                }else if(mes==1 || mes==3 || mes==5 || mes==7 || mes==8 || mes==10 || mes==12){
                    if(Integer.parseInt(this.diaInicioField.getText())>31){
                        error+="El mes de "+this.mesInicioCombo.getSelectedItem().toString()+" solo tiene 31 días\n";
                    }
                }else{
                    if(Integer.parseInt(this.diaInicioField.getText())>30){
                        error+="El mes de "+this.mesInicioCombo.getSelectedItem().toString()+" solo tiene 30 días\n";
                    }
                }
            }else{
                int mes=this.mesInicioCombo.getSelectedIndex();
                if(mes==2){
                    if(Integer.parseInt(this.diaInicioField.getText())>28){
                        error+="El mes de Febrero en ese año tiene solo 28 días\n";
                    }
                }else if(mes==1 || mes==3 || mes==5 || mes==7 || mes==8 || mes==10 || mes==12){
                    if(Integer.parseInt(this.diaInicioField.getText())>31){
                        error+="El mes de "+this.mesInicioCombo.getSelectedItem().toString()+" solo tiene 31 días\n";
                    }
                }else{
                    if(Integer.parseInt(this.diaInicioField.getText())>30){
                        error+="El mes de "+this.mesInicioCombo.getSelectedItem().toString()+" solo tiene 30 días\n";
                    }
                }
            }
        }catch(Exception e){
            error+="Ha dejado un campo de fecha de inicio vacio\n";
        }
               
        //validacion fin
        try{
            if(Integer.parseInt(this.anioFinField.getText())<=recepcion.getFechaInicio().getAnio()){
                if((this.mesFinCombo.getSelectedIndex())<=recepcion.getFechaInicio().getMes()){
                    if(Integer.parseInt(this.diaFinField.getText())<=recepcion.getFechaInicio().getDia() && (this.mesFinCombo.getSelectedIndex())<=recepcion.getFechaInicio().getMes()){
                        error+="Ha ingresado una fecha de fin anterior o igual \na la fecha de inicio de \nla reserva, ingrese de nuevo\n";
                    }
                }
            }
            if((Integer.parseInt(this.anioFinField.getText())%4==0) && (Integer.parseInt(this.anioFinField.getText())%100!=0 || Integer.parseInt(this.anioFinField.getText())%400==0)){
                int mes=this.mesFinCombo.getSelectedIndex();
                if(mes==2){
                    if(Integer.parseInt(this.diaFinField.getText())>29){
                        error+="El mes de Febrero en ese año tiene solo 29 días\n";
                    }
                }else if(mes==1 || mes==3 || mes==5 || mes==7 || mes==8 || mes==10 || mes==12){
                    if(Integer.parseInt(this.diaFinField.getText())>31){
                        error+="El mes de "+this.mesFinCombo.getSelectedItem().toString()+" solo tiene 31 días\n";
                    }
                }else{
                    if(Integer.parseInt(this.diaFinField.getText())>30){
                        error+="El mes de "+this.mesFinCombo.getSelectedItem().toString()+" solo tiene 30 días\n";
                    }
                }
            }else{
                int mes=this.mesFinCombo.getSelectedIndex();
                if(mes==2){
                    if(Integer.parseInt(this.diaFinField.getText())>28){
                        error+="El mes de Febrero en ese año tiene solo 28 días\n";
                    }
                }else if(mes==1 || mes==3 || mes==5 || mes==7 || mes==8 || mes==10 || mes==12){
                    if(Integer.parseInt(this.diaFinField.getText())>31){
                        error+="El mes de "+this.mesFinCombo.getSelectedItem().toString()+" solo tiene 31 días\n";
                    }
                }else{
                    if(Integer.parseInt(this.diaFinField.getText())>30){
                        error+="El mes de "+this.mesFinCombo.getSelectedItem().toString()+" solo tiene 30 días\n";
                    }
                }
            }
        }catch(Exception e){
            error+="Ha dejado un campo de fecha de fin vacio\n"; 
        }

        if(error.equalsIgnoreCase("")){
            //Creamos la reserva con todos los datos
            inicio = new Fecha(Integer.parseInt(this.diaInicioField.getText()), this.mesInicioCombo.getSelectedIndex(), 
                    Integer.parseInt(this.anioInicioField.getText()));
            fin = new Fecha(Integer.parseInt(this.diaFinField.getText()), this.mesFinCombo.getSelectedIndex(), 
                    Integer.parseInt(this.anioFinField.getText()));
            huesped = new Huesped(this.nombreField.getText(), this.idField.getText(), Integer.parseInt(this.edadField.getText()), this.correoField.getText(), 
                    this.telefonoField.getText());
            boolean ecuatoriana=false;
            if(this.validarIDComboBox.getSelectedItem().toString().equalsIgnoreCase("SI")){
                ecuatoriana = true;
            }
                       
            consumos = new ListaGasto();
            metodoPago = this.metodoPagoCombo.getSelectedItem().toString();
            totalConsumos = 0;
            pagoTotal = 0;
            habitacionOriginal = Integer.parseInt(this.habitacionCombo.getSelectedItem().toString());
            habitacionActual = Integer.parseInt(this.habitacionCombo.getSelectedItem().toString());
            cambioHabitacion = false;
            pagoDanios = 0;
            adultos = Integer.parseInt(this.totalAdultosField.getText());
            ninios = Integer.parseInt(this.totalNiniosField.getText());
            sugerencias = "";
             
            Reserva reserva = new Reserva(inicio, fin, recepcion.diasEstadia(fin, inicio), huesped, metodoPago, 0d, 0d, 
            0d, 0d, 0d, habitacionActual, habitacionActual, 0d, adultos, ninios, sugerencias, ecuatoriana);               
            //CREACION DE ARCHIVO Y ESCRITURA
            try {
                //Creamos un archivo con un nombre, en este caso la fecha de inicio
                File myObj = new File("PorteroAdminHotel\\Activas\\"+habitacion.toString()+"_"+inicio.toString()+"_"+fin.toString() + ".txt");//C:\\PorteroAdminHotel\\Activas\\

                //Si no existe se creara, si existe lo indicara
                if (!myObj.createNewFile()) {
                    JOptionPane.showMessageDialog(this, "Ya existe la reserva");
                }

                //Escritura, se busca el mismo nombre del archivo creado
                try (FileWriter myWriter = new FileWriter("PorteroAdminHotel\\Activas\\"+habitacion.toString()+"_"+inicio.toString()+"_"+fin.toString() + ".txt"))//C\\PorteroAdminHotel\\Activas\\
                {
                    //Escribiremos el toString de la reserva que debería tener todos los datos
                    myWriter.write(reserva.toString());
                    JOptionPane.showMessageDialog(this, "Registro exitoso");
                }catch (IOException e) {
                    JOptionPane.showMessageDialog(this, "Ocurrio un error al escribir el archivo");
                }   

            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Ocurrio un error al crear el archivo");
            }   
            this.diaInicioField.setText("");
            this.mesInicioCombo.setSelectedIndex(0);
            this.anioInicioField.setText("");
            this.diaFinField.setText("");
            this.mesFinCombo.setSelectedIndex(0);
            this.anioFinField.setText("");
            this.nombreField.setText("");
            this.idField.setText("");
            this.edadField.setText("");
            this.telefonoField.setText("");
            this.correoField.setText("");
            this.validarIDComboBox.setSelectedIndex(0);
            this.validarIDField.setText("-");
            this.totalAdultosField.setText("");
            this.totalNiniosField.setText("");
            this.metodoPagoCombo.setSelectedIndex(0);
            this.habitacionCombo.removeAllItems();
            this.habitacionCombo.addItem("-");
            this.habitacionCombo.setSelectedIndex(0);
            this.habitacionCombo.setEnabled(false);
            this.huespedTable.setModel(this.huesped);
            this.infoReservaTable.setModel(this.reserva);
            
        }else{
            JOptionPane.showMessageDialog(this, "Los siguientes campos están vacios o \nno se han ingresado adecuadamente los datos:\n"+error);
        }
    }//GEN-LAST:event_registarButtonActionPerformed

    private void previsualizarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previsualizarButtonActionPerformed
        // TODO add your handling code here:
        String nombre="", id="", edad="", telefono="", correo="", error="";
        LocalDate actual = LocalDate.now();//Da fecha actual 
        
        try{
            nombre = this.nombreField.getText();
            if(!nombre.matches("[ a-zA-Z]+")||nombre.matches("")||nombre.matches(" ")){
                error+="Ha ingresado datos inválidos en el nombre\n";
            }
        }catch(Exception e){
            error=error+"Nombre\n";
        }
        try{
            id = this.idField.getText();
            if(id.matches("")||id.matches(" ")){
                error+="Datos invalidos en la dentificación\n";
            }
        }catch(Exception e){
            error=error+"Identificación\n";
        }
        try{
            edad = this.edadField.getText();
            if(Integer.parseInt(edad)<18){
                error+="Edad inválida, debe tenr al menos 18\n";
            }
        }catch(Exception e){
            error=error+"Edad\n";
        }
        try{
            telefono = this.telefonoField.getText();
            if(telefono.matches("")||telefono.matches(" ")){
                error+="Datos inválidos en el teléfono\n";
            }
        }catch(Exception e){
            error=error+"Telefono\n";
        }
        if(!this.correoField.getText().isEmpty()){
            try{
                correo = this.correoField.getText();
                if(correo.matches("")||correo.matches(" ")){
                    error+="Datos inválidos en el correo\n";
                }
            }catch(Exception e){
                error=error+"Correo\n";
            }
        }

        String fechaInicio="", fechaFin="", totalAdultos="", totalNinios="", metodoPago="", habitacionOriginal="";
        try{
            fechaInicio=this.diaInicioField.getText()+"-"+this.mesInicioCombo.getSelectedItem().toString()+"-"+this.anioInicioField.getText();
            Integer.parseInt(this.diaInicioField.getText()); Integer.parseInt(this.anioInicioField.getText());
        }catch(Exception e){
            error=error+"Fecha de inicio\n";
        }
        try{
            fechaFin=this.diaFinField.getText()+"-"+this.mesFinCombo.getSelectedItem().toString()+"-"+this.anioFinField.getText();
            Integer.parseInt(this.diaInicioField.getText()); Integer.parseInt(this.anioInicioField.getText());
        }catch(Exception e){
            error=error+"Fecha de Fin\n";
        }
        try{
            totalAdultos=this.totalAdultosField.getText();
            if(Integer.parseInt(totalAdultos)<=0){
                error+="Deben haber más de cero adultos\n";
            }
        }catch(Exception e){
            error=error+"Total adultos\n";
        }
        try{
            totalNinios=this.totalNiniosField.getText();
            if(Integer.parseInt(totalNinios)<0){
                error+="Deben haber cero o más niños\n";
            }
        }catch(Exception e){
            error=error+"Total niños\n";
        }
        try{
            metodoPago=this.metodoPagoCombo.getSelectedItem().toString();
        }catch(Exception e){
            error=error+"Metodo de pago\n";
        }
        try{
            habitacionOriginal=this.habitacionCombo.getSelectedItem().toString();
            if(this.habitacionCombo.getSelectedItem().toString().equalsIgnoreCase("-")){
                error+="Escoja una habitación\n";
            }
        }catch(Exception e){
            error=error+"Habitación\n";
        }    
        //validacion inicio
        try{
            if(Integer.parseInt(this.anioInicioField.getText())<=actual.getYear()){
                if((this.mesInicioCombo.getSelectedIndex())<=actual.getMonthValue()){
                    if(Integer.parseInt(this.diaInicioField.getText())<actual.getDayOfMonth()&&(this.mesInicioCombo.getSelectedIndex())<=actual.getMonthValue()){
                        error+="Ha ingresado una fecha de inicio anterior a \nla fecha actual, ingrese de nuevo\n";
                    }
                }
            }
            recepcion.setFechaInicio(new Fecha(Integer.parseInt(this.diaInicioField.getText()), this.mesInicioCombo.getSelectedIndex(), 
                Integer.parseInt(this.anioInicioField.getText())));
            if((Integer.parseInt(this.anioInicioField.getText())%4==0) && (Integer.parseInt(this.anioInicioField.getText())%100!=0 || Integer.parseInt(this.anioInicioField.getText())%400==0)){
                int mes=this.mesInicioCombo.getSelectedIndex();
                if(mes==2){
                    if(Integer.parseInt(this.diaInicioField.getText())>29){
                        error+="El mes de Febrero en ese año tiene solo 29 días\n";
                    }
                }else if(mes==1 || mes==3 || mes==5 || mes==7 || mes==8 || mes==10 || mes==12){
                    if(Integer.parseInt(this.diaInicioField.getText())>31){
                        error+="El mes de "+this.mesInicioCombo.getSelectedItem().toString()+" solo tiene 31 días\n";
                    }
                }else{
                    if(Integer.parseInt(this.diaInicioField.getText())>30){
                        error+="El mes de "+this.mesInicioCombo.getSelectedItem().toString()+" solo tiene 30 días\n";
                    }
                }
            }else{
                int mes=this.mesInicioCombo.getSelectedIndex();
                if(mes==2){
                    if(Integer.parseInt(this.diaInicioField.getText())>28){
                        error+="El mes de Febrero en ese año tiene solo 28 días\n";
                    }
                }else if(mes==1 || mes==3 || mes==5 || mes==7 || mes==8 || mes==10 || mes==12){
                    if(Integer.parseInt(this.diaInicioField.getText())>31){
                        error+="El mes de "+this.mesInicioCombo.getSelectedItem().toString()+" solo tiene 31 días\n";
                    }
                }else{
                    if(Integer.parseInt(this.diaInicioField.getText())>30){
                        error+="El mes de "+this.mesInicioCombo.getSelectedItem().toString()+" solo tiene 30 días\n";
                    }
                }
            }
        }catch(Exception e){
            error+="Ha dejado un campo de fecha de inicio vacio\n";
        }
              
        
        //validacion fin
        try{
            if(Integer.parseInt(this.anioFinField.getText())<=recepcion.getFechaInicio().getAnio()){
                if((this.mesFinCombo.getSelectedIndex())<=recepcion.getFechaInicio().getMes()){
                    if(Integer.parseInt(this.diaFinField.getText())<=recepcion.getFechaInicio().getDia() && (this.mesFinCombo.getSelectedIndex())<=recepcion.getFechaInicio().getMes()){
                        error+="Ha ingresado una fecha de fin anterior o igual \na la fecha de inicio de \nla reserva, ingrese de nuevo\n";
                    }
                }
            }
            if((Integer.parseInt(this.anioFinField.getText())%4==0) && (Integer.parseInt(this.anioFinField.getText())%100!=0 || Integer.parseInt(this.anioFinField.getText())%400==0)){
                int mes=this.mesFinCombo.getSelectedIndex();
                if(mes==2){
                    if(Integer.parseInt(this.diaFinField.getText())>29){
                        error+="El mes de Febrero en ese año tiene solo 29 días\n";
                    }
                }else if(mes==1 || mes==3 || mes==5 || mes==7 || mes==8 || mes==10 || mes==12){
                    if(Integer.parseInt(this.diaFinField.getText())>31){
                        error+="El mes de "+this.mesFinCombo.getSelectedItem().toString()+" solo tiene 31 días\n";
                    }
                }else{
                    if(Integer.parseInt(this.diaFinField.getText())>30){
                        error+="El mes de "+this.mesFinCombo.getSelectedItem().toString()+" solo tiene 30 días\n";
                    }
                }
            }else{
                int mes=this.mesFinCombo.getSelectedIndex();
                if(mes==2){
                    if(Integer.parseInt(this.diaFinField.getText())>28){
                        error+="El mes de Febrero en ese año tiene solo 28 días\n";
                    }
                }else if(mes==1 || mes==3 || mes==5 || mes==7 || mes==8 || mes==10 || mes==12){
                    if(Integer.parseInt(this.diaFinField.getText())>31){
                        error+="El mes de "+this.mesFinCombo.getSelectedItem().toString()+" solo tiene 31 días\n";
                    }
                }else{
                    if(Integer.parseInt(this.diaFinField.getText())>30){
                        error+="El mes de "+this.mesFinCombo.getSelectedItem().toString()+" solo tiene 30 días\n";
                    }
                }
            }
        }catch(Exception e){
            error+="Ha dejado un campo de fecha de fin vacio\n";
        }
                 
        if(error.equalsIgnoreCase("")){
            huespedTable.setModel(huesped);
            Object filaHuesped[]={nombre, id, edad, telefono, correo};
            huesped.setRowCount(0);
            huesped.addRow(filaHuesped);

            infoReservaTable.setModel(reserva);
            Object filaReserva[]={fechaInicio, fechaFin, totalAdultos, totalNinios, metodoPago, habitacionOriginal};
            //Arreglo de objetos genericos para mandar ese arreglo a cada fila
            reserva.setRowCount(0);
            reserva.addRow(filaReserva);               
        }else{
            JOptionPane.showMessageDialog(this, "Los siguientes campos están vacios o \nno se han ingresado adecuadamente los datos:\n"+error);
        }
    }//GEN-LAST:event_previsualizarButtonActionPerformed

    private void actualizarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actualizarButtonActionPerformed
        // TODO add your handling code here:
        String error="";
        //validacion inicio
        LocalDate actual = LocalDate.now();//Da fecha actual 
        try{            
            if(Integer.parseInt(this.anioInicioField.getText())<=actual.getYear()){
                if((this.mesInicioCombo.getSelectedIndex())<=actual.getMonthValue()){
                    if(Integer.parseInt(this.diaInicioField.getText())<actual.getDayOfMonth()&&(this.mesInicioCombo.getSelectedIndex())<=actual.getMonthValue()){
                        error+="Ha ingresado una fecha de inicio anterior a \nla fecha actual, ingrese de nuevo\n";
                    }
                }
            }
            recepcion.setFechaInicio(new Fecha(Integer.parseInt(this.diaInicioField.getText()), this.mesInicioCombo.getSelectedIndex(), 
                Integer.parseInt(this.anioInicioField.getText())));
            if((Integer.parseInt(this.anioInicioField.getText())%4==0) && (Integer.parseInt(this.anioInicioField.getText())%100!=0 || Integer.parseInt(this.anioInicioField.getText())%400==0)){
                int mes=this.mesInicioCombo.getSelectedIndex();
                if(mes==2){
                    if(Integer.parseInt(this.diaInicioField.getText())>29){
                        error+="El mes de Febrero en ese año tiene solo 29 días\n";
                    }
                }else if(mes==1 || mes==3 || mes==5 || mes==7 || mes==8 || mes==10 || mes==12){
                    if(Integer.parseInt(this.diaInicioField.getText())>31){
                        error+="El mes de "+this.mesInicioCombo.getSelectedItem().toString()+" solo tiene 31 días\n";
                    }
                }else{
                    if(Integer.parseInt(this.diaInicioField.getText())>30){
                        error+="El mes de "+this.mesInicioCombo.getSelectedItem().toString()+" solo tiene 30 días\n";
                    }
                }
            }else{
                int mes=this.mesInicioCombo.getSelectedIndex();
                if(mes==2){
                    if(Integer.parseInt(this.diaInicioField.getText())>28){
                        error+="El mes de Febrero en ese año tiene solo 28 días\n";
                    }
                }else if(mes==1 || mes==3 || mes==5 || mes==7 || mes==8 || mes==10 || mes==12){
                    if(Integer.parseInt(this.diaInicioField.getText())>31){
                        error+="El mes de "+this.mesInicioCombo.getSelectedItem().toString()+" solo tiene 31 días\n";
                    }
                }else{
                    if(Integer.parseInt(this.diaInicioField.getText())>30){
                        error+="El mes de "+this.mesInicioCombo.getSelectedItem().toString()+" solo tiene 30 días\n";
                    }
                }
            }
        }catch(Exception e){
            error+="Ha dejado un campo de fecha de inicio vacio\n";
        }
                    
        //validacion fin
        try{
            if(Integer.parseInt(this.anioFinField.getText())<=recepcion.getFechaInicio().getAnio()){
                if((this.mesFinCombo.getSelectedIndex())<=recepcion.getFechaInicio().getMes()){
                    if(Integer.parseInt(this.diaFinField.getText())<=recepcion.getFechaInicio().getDia() && (this.mesFinCombo.getSelectedIndex())<=recepcion.getFechaInicio().getMes()){
                        error+="Ha ingresado una fecha de fin anterior o igual \na la fecha de inicio de \nla reserva, ingrese de nuevo\n";
                    }
                }
            }
            if((Integer.parseInt(this.anioFinField.getText())%4==0) && (Integer.parseInt(this.anioFinField.getText())%100!=0 || Integer.parseInt(this.anioFinField.getText())%400==0)){
                int mes=this.mesFinCombo.getSelectedIndex();
                if(mes==2){
                    if(Integer.parseInt(this.diaFinField.getText())>29){
                        error+="El mes de Febrero en ese año tiene solo 29 días\n";
                    }
                }else if(mes==1 || mes==3 || mes==5 || mes==7 || mes==8 || mes==10 || mes==12){
                    if(Integer.parseInt(this.diaFinField.getText())>31){
                        error+="El mes de "+this.mesFinCombo.getSelectedItem().toString()+" solo tiene 31 días\n";
                    }
                }else{
                    if(Integer.parseInt(this.diaFinField.getText())>30){
                        error+="El mes de "+this.mesFinCombo.getSelectedItem().toString()+" solo tiene 30 días\n";
                    }
                }
            }else{
                int mes=this.mesFinCombo.getSelectedIndex();
                if(mes==2){
                    if(Integer.parseInt(this.diaFinField.getText())>28){
                        error+="El mes de Febrero en ese año tiene solo 28 días\n";
                    }
                }else if(mes==1 || mes==3 || mes==5 || mes==7 || mes==8 || mes==10 || mes==12){
                    if(Integer.parseInt(this.diaFinField.getText())>31){
                        error+="El mes de "+this.mesFinCombo.getSelectedItem().toString()+" solo tiene 31 días\n";
                    }
                }else{
                    if(Integer.parseInt(this.diaFinField.getText())>30){
                        error+="El mes de "+this.mesFinCombo.getSelectedItem().toString()+" solo tiene 30 días\n";
                    }
                }
            }
        }catch(Exception e){
            error+="Ha dejado un campo de fecha de fin vacio\n";
        }
        if(error.equalsIgnoreCase("")){
            this.habitacionCombo.removeAllItems();
            this.habitacionCombo.addItem("-");
            this.habitacionCombo.setSelectedIndex(0);
            this.habitacionCombo.setEnabled(true);
            Fecha inicio = new Fecha(), fin = new Fecha();
            try{
                inicio=new Fecha(Integer.parseInt(this.diaInicioField.getText()), this.mesInicioCombo.getSelectedIndex(), Integer.parseInt(this.anioInicioField.getText()));
                Integer.parseInt(this.diaInicioField.getText()); Integer.parseInt(this.anioInicioField.getText());
            }catch(Exception e){
                error=error+"Fecha de inicio\n";
            }
            try{
                fin=new Fecha(Integer.parseInt(this.diaFinField.getText()), this.mesFinCombo.getSelectedIndex(), Integer.parseInt(this.anioFinField.getText()));
                Integer.parseInt(this.diaInicioField.getText()); Integer.parseInt(this.anioInicioField.getText());
            }catch(Exception e){
                error=error+"Fecha de Fin\n";
            }
            //Metodo de clase admin que evalua las habitaciones disponibles para la fecha
            List<String> disponibles = recepcion.habDisponiblesRe(inicio, fin);
            List<String> quitar = recepcion.habMantenimiento(inicio, fin);
            for(String quita : quitar){
                disponibles.remove(quita);
            }
            for(String disponible : disponibles){
                this.habitacionCombo.addItem(disponible);
            }
            this.habitacionCombo.setSelectedIndex(0);
        }else{
            JOptionPane.showMessageDialog(this, "Los siguientes campos están vacios o \nno se han ingresado adecuadamente los datos:\n"+error);
        }      
    }//GEN-LAST:event_actualizarButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NuevaReserva.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NuevaReserva.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NuevaReserva.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NuevaReserva.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Admin recepcionP = new Admin();
                new NuevaReserva(recepcionP).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AdultosLabel;
    private javax.swing.JButton actualizarButton;
    private javax.swing.JTextField anioFinField;
    private javax.swing.JTextField anioInicioField;
    private javax.swing.JTextField correoField;
    private javax.swing.JLabel correoLabel;
    private javax.swing.JTextField diaFinField;
    private javax.swing.JTextField diaInicioField;
    private javax.swing.JTextField edadField;
    private javax.swing.JLabel edadLabel;
    private javax.swing.JComboBox<String> habitacionCombo;
    private javax.swing.JLabel habitacionLabel;
    private javax.swing.JTable huespedTable;
    private javax.swing.JTextField idField;
    private javax.swing.JLabel idLabel;
    private javax.swing.JTable infoReservaTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox<String> mesFinCombo;
    private javax.swing.JComboBox<String> mesInicioCombo;
    private javax.swing.JComboBox<String> metodoPagoCombo;
    private javax.swing.JTextField nombreField;
    private javax.swing.JLabel nombreLabel;
    private javax.swing.JButton previsualizarButton;
    private javax.swing.JLabel previzLabel;
    private javax.swing.JScrollPane principalScrollPane;
    private javax.swing.JButton registarButton;
    private javax.swing.JTextField telefonoField;
    private javax.swing.JLabel telefonoLabel;
    private javax.swing.JTextField totalAdultosField;
    private javax.swing.JTextField totalNiniosField;
    private javax.swing.JComboBox<String> validarIDComboBox;
    private javax.swing.JTextField validarIDField;
    // End of variables declaration//GEN-END:variables
}
